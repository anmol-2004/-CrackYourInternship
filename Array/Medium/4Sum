//Leetcode 18
//https://leetcode.com/problems/4sum/description/


class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        vector<vector<int>> res;

        for (int i = 0; i < n - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            for (int j = i + 1; j < n - 2; j++) 
                if (j > i + 1 && nums[j] == nums[j - 1]) {
                    continue;
                }
                int left = j + 1, right = n - 1;
           
                while (left < right) {
                    long long a = nums[i] + nums[j];
                    long long b = a + nums[left] + nums[right];
                    
                    if (b == target) {
                        res.push_back({ nums[i], nums[j], nums[left], nums[right] });

                        while (left < right && nums[left] == nums[left + 1]) {
                            left++;
                        }
      
                        while (left < right && nums[right] == nums[right - 1]) {
                            right--;
                        }
                        left++;
                        right--;
                    }
                    else if (b < target) {
                        left++;
                    }
                    else {
                        right--;
                    }
                }
            }
        }
        // return the result
        return res;
    }
};
